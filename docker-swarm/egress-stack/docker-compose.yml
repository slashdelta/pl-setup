version: '3.8'

services:
  # Traefik - Reverse Proxy for Docker Swarm
  traefik:
    image: traefik:latest
    command:
      # Enable Docker Swarm provider
      - --providers.docker=true
      - --providers.docker.swarmmode=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=${TRAEFIK_NETWORK}
      # Configure entrypoints
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # Enable API and dashboard
      - --api.dashboard=${TRAEFIK_API_DASHBOARD}
      - --api.insecure=false
      # Configure logging
      - --log.level=${TRAEFIK_LOG_LEVEL}
      - --accesslog=true
      # Configure Let's Encrypt with Cloudflare DNS Challenge
      - --certificatesresolvers.cloudflare.acme.dnschallenge=true
      - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesresolvers.cloudflare.acme.email=admin@${DOMAIN}
      - --certificatesresolvers.cloudflare.acme.storage=/letsencrypt/acme.json
      # Global redirect to HTTPS
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${CONFIG_MOUNT_POINT}/traefik/letsencrypt:/letsencrypt
      - ${CONFIG_MOUNT_POINT}/traefik/config:/etc/traefik/dynamic
    networks:
      - traefik
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - CF_DNS_API_TOKEN=${CLOUDFLARE_DNS_API_TOKEN}
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: unless-stopped
        delay: 5s
        max_attempts: 3
        window: 120s
      labels:
        # Enable Traefik for this service
        - "traefik.enable=true"
        # Dashboard configuration
        - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
        - "traefik.http.routers.traefik.entrypoints=websecure"
        - "traefik.http.routers.traefik.tls.certresolver=cloudflare"
        - "traefik.http.routers.traefik.service=api@internal"
        - "traefik.http.routers.traefik.middlewares=auth"
        # Basic auth middleware
        - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_BASIC_AUTH}"
        # Service configuration
        - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # Cloudflared - Cloudflare Tunnel
  cloudflared:
    image: cloudflare/cloudflared:latest
    command: tunnel --no-autoupdate run
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - traefik
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: unless-stopped
        delay: 5s
        max_attempts: 3
        window: 120s

  # Whoami - Test service for Traefik
  whoami:
    image: traefik/whoami:latest
    networks:
      - traefik
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: unless-stopped
        delay: 5s
        max_attempts: 3
        window: 120s
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.whoami.rule=Host(`whoami.${DOMAIN}`)"
        - "traefik.http.routers.whoami.entrypoints=websecure"
        - "traefik.http.routers.whoami.tls.certresolver=cloudflare"
        - "traefik.http.services.whoami.loadbalancer.server.port=80"

networks:
  traefik:
    external: true
    name: ${TRAEFIK_NETWORK}
